// Type definitions for Serializable 1.0.0
// Project: https://github.com/atom/serializable
// Definitions by: Vadim Macagon <https://github.com/enlight/>
// Definitions: https://github.com/borisyankov/DefinitelyTyped

/// <reference path="../mixto/mixto.d.ts" />

declare module AtomSerializable {
	interface ISerializedState {
		version?: number;
		/** The name of the deserializer that should be used to deserialize an object from this state. */
		deserializer: string;
	}

	/** Static side of the Serializable class. */
	interface SerializableStatic extends Mixto.IMixinStatic {
		prototype: Serializable;

		new (): Serializable;
		/**
		 * Register serializable classes.
		 *
		 * @param deserializers Classes (constructor functions) that either include or extend the
		 *					  Serializable mixin.
		 */
		registerDeserializers(...deserializers: Function[]): void;
		/**
		 * Register a serializable class.
		 *
		 * @param deserializer A class (constructor function) that either includes or extends the
		 *					 Serializable mixin.
		 */
		registerDeserializer(deserializer: Function): void;
		/**
		 * Deserializes an object from a serialized state.
		 *
		 * @param <T> Type of object to deserialize.
		 * @param state Serialized state of the object to deserialize, in most cases this state will be
		 *			  created by the [[serialize]] instance method.
		 * @param params Additional non-serializable parameters which will be merged with the
		 *			   deserialized parameters when constructing the object.
		 * @return The deserialized object, or 'undefined' if deserialization failed.
		 */
		deserialize<T>(state: ISerializedState, params?: any): T;
	}

	/** Instance side of Serializable class. */
	interface Serializable {
		constructor: SerializableStatic;
		/**
		 * Serializes this object.
		 *
		 * @return The serialized state of this object.
		 */
		serialize(): ISerializedState;
	}

	/** A mixin to streamline the process of writing serializable classes. */
	var Serializable: SerializableStatic;

	/**
	 * Classes that extend or include the `Serializable` class should implement this interface.
	 * Note that the constructor parameters should match the parameters that are
	 * serialized/deserialized.
	 */
	interface IParamsSerializer {
		/**
		 * Serialize the object.
		 *
		 * @return A plain JavaScript object (AKA params hash) containing the serialized version
		 *		 of all parameters required to reconstruct the object.
		 */
		serializeParams: () => any;
		/**
		 * Deserializes the nested objects in the given params hash.
		 *
		 * Note that this method only needs to be implemented if the params hash generated by
		 * [[serializeParams]] contains nested serialized objects.
		 *
		 * @param params
		 * @return A plain JavaScript object (AKA params hash) containing the deserialized version of
		 *		 all parameters required to reconstruct the object
		 */
		deserializeParams?: (params: any) => any;
	}

	/**
	 * A combination of the *instance side* of the `Serializable` class and the `IParamsSerializer`
	 * interface.
	 */
	 interface ISerializable extends IParamsSerializer {
		serialize(): ISerializedState;
	}
} // module AtomSerializable

declare module "serializable" {
	export = AtomSerializable;
}
