// Type definitions for Serializable 1.0.0
// Project: https://github.com/atom/serializable
// Definitions by: Vadim Macagon <https://github.com/enlight/>
// Definitions: https://github.com/borisyankov/DefinitelyTyped

/// <reference path="../mixto/mixto.d.ts" />

declare module AtomSerializable {
  interface ISerializedState {
    version?: number;
    /** The name of the deserializer that should be used to deserialize an object from this state. */
		deserializer: string;
	}

  /** A mixin to streamline the process of writing serializable classes. */
  class Serializable extends Mixto.Mixin {
    /**
     * Register serializable classes.
     * @param deserializers Classes (constructor functions) that either include or extend the
     *                     Serializable mixin.
     */
    static registerDeserializers(...deserializers: Function[]): void;
    /**
     * Register a serializable class.
     *
     *```TypeScript
     * class Vehicle implements IParamsSerializer {
     *   serializeParams(): any {
     *     ...
     *   }
     *   ...
     * }
     * Serializable.includeInto(Vehicle);
     * Serializable.registerDeserializer(Vehicle);
     *```
     * @param deserializer A class (constructor function) that either includes or extends the
     *                     Serializable mixin.
     */
    static registerDeserializer(deserializer: Function): void;
    /**
     * Deserializes an object from a serialized state.
     * @param state Serialized state of the object to deserialize, in most cases this state will be
     *              created by the [[serialize]] instance method.
     * @param params Additional non-serializable parameters which will be merged with the
     *               deserialized parameters when constructing the object.
     * @return The deserialized object, or 'undefined' if deserialization failed.
     */
    static deserialize(state: ISerializedState, params?: any): any;
    /**
     * Serializes this object.
     * @return The serialized state of this object.
     */
    serialize(): ISerializedState;
  }

  /**
   * Classes that extend or include the Serializable class should implement this interface.
   * Note that the constructor parameters should match the parameters that are
   * serialized/deserialized.
   */
  interface IParamsSerializer {
    /**
     * Serialize the object.
     *
     * @return A plain JavaScript object (AKA params hash) containing the serialized version of all
     *         parameters required to reconstruct the object.
     */
    serializeParams: () => any;
    /**
     * Deserializes the nested objects in the given params hash.
     *
     * Note that this method only needs to be implemented if the params hash generated by
     * [[serializeParams]] contains nested serialized objects.
     *
     * @param params
     * @return A plain JavaScript object (AKA params hash) containing the deserialized version of
     *         all parameters required to reconstruct the object
     */
    deserializeParams?: (params: any) => any;
  }

  /**
   * A combination of the *instance side* of the `Serializable` class and the `IParamsSerializer`
   * interface. This is the actual instance side interface of any serializable class built with the
   * `Serializable` mixin.
   */
  interface ISerializable extends Serializable, IParamsSerializer {
  }

  // This interface is just for reference and corresponds to a subset of the static side of a class
  // that includes or extends the Serializable mixin class.
  interface ISerializableStatic {
    // Optional version number that will be compared to `ISerializedState.version`,
    // deserialization will fail if there is a version mismatch.
		version?: number;
    // This coresponds to the name of the class (constructor function),
    // and is what will be stored in `ISerializedState.deserializer`.
		name: string;
	}
} // module AtomSerializable

declare module "serializable" {
  export = AtomSerializable;
}
